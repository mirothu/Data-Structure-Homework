
A.a)本题使用了普通的数组来记录每位教练的选择顺序，并通过对整个选球员的过程进行模拟操作，并实时记录各位教练选择顺序中各球员被选择的情况，最终遍历得到在选择到第k号球员之前所有的选择情况，一旦得出结果即结束循环，输出A或B或C。
b)本题实现该算法的要点在于如何高效的进行遍历操作：
我使用了在循环内设置指示器的方法，一旦找到了k号球员的归属，便重置该指示器为1并结束循环输出结果；同时使用Aset、Bset、Cset来表示A、B、C三位教练的前A（BC）set个球员已经被选择，下次进行选择时只需从A[Aset]开始查找，这减少了对已被选择球员的遍历次数，一定程度上节约了时间成本。

B.在本题的解决过程中我遇到了一个runtime error的问题，但一直没有找到解决方法。在之后做1-4那道题时，与夏萌霏同学进行交流之后考虑到可能是创建动态数组时出现了问题，因此我根据本题的数据范围，提前初始化了较大的数组并将其写为全局变量，最终解决了这一问题。
但在最后思考之后，我认为这种方法并不是最好的，代码看起来不够美观。可以采用 int *A = new int[num]的形式来申请内存，且在程序最后应当delete A。
同时另外一个问题是我将记录k号球员是否被选择的指示器放在了在循环中，导致每次循环都进行一次初始化，进行了多余的操作，增加了运行负担。

C.本题由于所需存储的内容仅与球员个数n有关，且每个球员所需的存储的内容为O(1)的，因此空间复杂度是线性的，即O(n)。
本题中主要的操作集中于读入数据以及遍历挑选球员中。而读入3n+2个整型数据所需的时间为O(n)的；遍历操作中最差的情况是k在最后一次循环中才被选中，此时大约一共经过了O(n)次操作，即整体的时间复杂度约为O(n)的。
