A.本题中我主要使用了邻接表来存储边的数据，并实现了队列类和顶点类等结构。
主要的算法是首先通过拓扑排序将图中的所有顶点排序，并对拓扑序列中所有入度为0的点进行遍历，分别计算出以该点为起点的所有路径中的最大值，并与其他点对比，输出最大值。
而在计算从某点出发的最大值的算法中，我参考了有向无环图中求最长路径的算法：即首先初始化该点到其他点的最大值为一个绝对值很大的负数存在tmp_from数组中，然后对每个点u的邻接点v进行判断：
若tmp_from[v]<tmp_from[u]+（u到v的路径的权重）,则将tmp_from[v]更新为后面和式的值，然后对u的下一个邻接点t进行同样的操作。最后返回tmp_from数组的最大值。
B.在做本题的时候，我先是采用了贪心法来判断每个点在有多个邻接点时该如何选择路径，但最终发现这种算法是不对的，最终参考了资料后认为应该使用类似动态规划的方法来对这个有向无环图寻找最长路径。
C.空间复杂度：存储n个城市点相关数据，并创建了n个邻接表来存储m条边的信息，此后所有其他相关辅助数据不超过O（m），因此此处的空间复杂度为O（m+n）。
时间复杂度：读入数据的操作时间复杂度为O（m）的，而将每条边加入邻接表中的操作复杂度是O（1）的，因此初始化整个图的时间复杂度为O（m）。而拓扑排序中在判断点的拓扑关系时，对每条边都进行了遍历操作，因此拓扑排序是O（m）的。在获取最大值时，我们对所有入度为0的点进行了遍历，不妨设这样的点的个数为t，而对每个起点找最大值时，我们对几乎所有边都进行了访问，故也是O（m）的。总的来看来入度为0的点较少时，时间复杂度为O（m）的。